apply plugin: 'com.android.library'

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        externalNativeBuild {
            cmake {
                cppFlags "-std=c++14 -frtti -fexceptions"
                arguments "-DANDROID_STL=c++_shared"
            }
        }

        ndk {
        }        
    }

    buildTypes {
        release {
            minifyEnabled false
        }
    }

    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }    
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
}

apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'ivy-publish'
apply plugin: 'maven-publish'

def isReleaseBuild() {
    return VERSION_NAME.contains("SNAPSHOT") == false
}

def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
            : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
            : "https://oss.sonatype.org/content/repositories/snapshots/"
}

def getRepositoryUsername() {
    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
}


        def outputFile = file("${buildDir}/outputs/aar/${project.name}-${VERSION_NAME}.${POM_PACKAGING}")
        def myRpm = artifacts.add('archives', outputFile) {
            type('zip')

            def destFile = it.getFile()
            def destName = it.getName()
            def destExtension = it.getExtension()
            def destDir = destFile.getParentFile()

            task installerArtifact(type: Zip) {
                baseName = destName
                destinationDir = destDir
                extension = destExtension

                println "destinationDir: ${destDir}"
                println "destinationFile: ${destDir}/${destName}.${destExtension}"

                from("src/main/cpp/includes") {
                    include "**/*.h*"
                    into "src/main/cpp/includes"
                }

                from("third-party-libs/uuid") {
                    include "uuid.h"
                    into "src/main/cpp/includes/public/uuid"
                }                

                from("cmake") {
                    include "CMakelists-distribution.txt"
                    rename { 'CMakelists.txt' }
                    into "cmake"
                }   

                from("cmake") {
                    include "android-jni-support.cmake"
                    into "cmake"
                }   

                from("lib") {
                    include "**/libandroid-jni-support-static.a"
                    include "**/libuuid.a"
                    into "libs/android-jni-support-static"
                }

                from("third-party-libs/uuid/lib") {
                    include "**/libuuid.a"
                    into "libs/uuid"
                }                

            }

            builtBy installerArtifact
        }

publishing {
    repositories {
        maven {
            name 'Sonatype'
            url isReleaseBuild() ? getReleaseRepositoryUrl() : getSnapshotRepositoryUrl()
            credentials {
                username getRepositoryUsername()
                password getRepositoryPassword()
            }
        }
    }

    publications {
        artifactoryPublications(MavenPublication) {
            artifact myRpm
            groupId GROUP
            artifactId POM_ARTIFACT_ID
            version VERSION_NAME
        }
    }
}



// signing {
//     sign configurations.archives
// }

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            pom.groupId = GROUP
            pom.artifactId = POM_ARTIFACT_ID
            pom.version = VERSION_NAME

            repository(url: getReleaseRepositoryUrl()) {
                authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
            }

            snapshotRepository(url: getSnapshotRepositoryUrl()) {
                authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
            }

            pom.project {
                name POM_NAME
                packaging POM_PACKAGING
                description POM_DESCRIPTION
                url POM_URL

                scm {
                    url POM_SCM_URL
                    connection POM_SCM_CONNECTION
                    developerConnection POM_SCM_DEV_CONNECTION
                }

                licenses {
                    license {
                        name POM_LICENCE_NAME
                        url POM_LICENCE_URL
                        distribution POM_LICENCE_DIST
                    }
                }

                developers {
                    developer {
                        id POM_DEVELOPER_ID
                        name POM_DEVELOPER_NAME
                        email POM_DEVELOPER_EMAIL
                        url POM_DEVELOPER_URL
                        roles {
                            role POM_DEVELOPER_ROLE
                        }
                    }
                }
            }
        }
    }
}
        


publish.dependsOn("assembleRelease")

