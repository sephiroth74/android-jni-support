
apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

// set to false to use the local android-jni-support project instead
ext.use_remote_library = true

android {
    compileSdkVersion 28

    defaultConfig {
        applicationId "it.sephiroth.androidjnisupport"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        externalNativeBuild {
            cmake {
                cppFlags "-std=c++14 -frtti -fexceptions"
                
                if(use_remote_library) {
                    arguments "-DANDROID_STL=c++_shared",
                        "-DCMAKE_LIB_DIR=${buildDir}/external_dependencies/it.sephiroth.android.library.android-jni-support/core/1.0.1-SNAPSHOT"
                } else {
                    arguments "-DANDROID_STL=c++_shared"
                }
            }
        }

        ndk { 
            abiFilters 'x86_64'
        }
    }

    sourceSets {
        main {
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }
}

configurations {
    myconf {
        transitive = false
    }
}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.constraintlayout:constraintlayout-solver:1.1.3'
    implementation 'com.google.android.material:material:1.1.0-alpha01'

    if(use_remote_library) {
        myconf group:'it.sephiroth.android.library.android-jni-support', name:'core', version:'1.0.1-SNAPSHOT', ext:'zip'
    } else {
        implementation project(':android-jni-support')
    }

    testImplementation 'junit:junit:4.12'

    androidTestImplementation 'androidx.test:runner:1.1.0'
    androidTestImplementation 'androidx.test:rules:1.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'
}

project.afterEvaluate {
    def config = configurations.myconf
    config.resolve()

    if (config.resolvedState.name().equals('ARTIFACTS_RESOLVED')) {
        config.getAllDependencies().collect { 
            def outputDir = file("${buildDir}/external_dependencies/${it.group}/${it.name}/${it.version}")
            def fileName = config.files.find { it.name.equals(it.name) }

            if (!outputDir.exists()) {
                println "Extracting ${fileName} into ${outputDir}.."

                outputDir.deleteDir()

                copy {
                    from zipTree(fileName)
                    into outputDir
                }
            } else {
                println "$outputDir already exists.. skipping"
            }
        }
    }
}

